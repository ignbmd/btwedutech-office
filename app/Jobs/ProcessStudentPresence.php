<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use App\Services\ZoomAPIService\Meeting;
use App\Services\LearningService\Presence;
use App\Services\OnlineClassService\OnlineAttendance;
use App\Helpers\RabbitMq;


class ProcessStudentPresence implements ShouldQueue
{
  private $data;
  use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

  /**
   * Create a new job instance.
   *
   * @return void
   */
  public function __construct($data)
  {
    $this->data = $data;
  }

  /**
   * Execute the job.
   *
   * @return void
   */
  public function handle()
  {
    $zoomMeetingService = new Meeting();

    $participants = collect([]);
    $zoom_meeting_id = $this->data["online_schedule"]->zoom_meeting_id;

    $meetingParticipantsResponse = $zoomMeetingService->getPastMeetingParticipants($zoom_meeting_id, ['page_size' => 500]);
    $meetingParticipantsBody = json_decode($meetingParticipantsResponse->body());
    $meetingParticipantsStatus = $meetingParticipantsResponse->status();
    if ($meetingParticipantsStatus !== 200) {
      Log::error("[ZoomWebhook][meeting.ended] could not get meeting participants data from zoom API - Response returned with non 2xx status code", ["response" => $meetingParticipantsBody, "status" => $meetingParticipantsStatus]);
      return response()->json($meetingParticipantsBody, $meetingParticipantsStatus);
    }
    $participants->push($meetingParticipantsBody->participants);

    while ($meetingParticipantsBody->next_page_token) {
      $meetingParticipantsResponse = $zoomMeetingService->getPastMeetingParticipants($this->data["online_schedule"]->zoom_meeting_id, ['page_size' => 300, 'next_page_token' => $meetingParticipantsBody->next_page_token]);
      $meetingParticipantsBody = json_decode($meetingParticipantsResponse->body());
      $meetingParticipantsStatus = $meetingParticipantsResponse->status();
      if ($meetingParticipantsStatus !== 200) {
        Log::error("[ZoomWebhook][meeting.ended] could not get meeting participants data from zoom API - Response returned with non 2xx status code", ["response" => $meetingParticipantsBody, "status" => $meetingParticipantsStatus]);
        return response()->json($meetingParticipantsBody, $meetingParticipantsStatus);
      }
      if (!$meetingParticipantsBody->participants) continue;
      $participants->push($meetingParticipantsBody->participants);
    }

    $participants = $participants->collapse()->toArray();
    $participants = array_reduce($participants, function ($carry, $item) {
      if (!isset($carry[$item->user_email])) {
        $carry[$item->user_email] = ['name' => $item->name, 'user_email' => $item->user_email, 'duration' => $item->duration];
      } else {
        $carry[$item->user_email]['duration'] += $item->duration;
      }
      return $carry;
    });

    // $maxMeetingDuration = collect($participants)->max('duration');
    // $maxMeetingDurationInMinutes = intval(ceil($maxMeetingDuration / 60)) < $this->data["online_schedule"]->duration
    // ? intval(ceil($maxMeetingDuration / 60))
    // : $this->data["online_schedule"]->duration;

    $maxMeetingDurationInMinutes = 90;

    $participants = collect($participants)->map(function ($item, $key) use ($maxMeetingDurationInMinutes) {
      $item["duration_in_minutes"] = intval(ceil($item["duration"] / 60));
      $item["duration_percentages"] = intval(ceil(($item["duration_in_minutes"] / $maxMeetingDurationInMinutes) * 100));
      return $item;
    })->values()->toArray();
    // Log::info("[ZoomWebhook][meeting.ended] Get meeting participants meeting duration", ["data" => $participants]);
    $presenceLog = collect($this->data["class_participants"])
      ->map(function ($item, $key) use ($participants, $zoom_meeting_id) {
        $participantEmail = array_column($participants, "user_email");
        $meetingParticipantArrayIndex = array_search(strtolower($item->email), $participantEmail);
        $participant = $meetingParticipantArrayIndex === false ? null : $participants[$meetingParticipantArrayIndex];

        $logs = [];
        $logs["smartbtw_id"] = $item->smartbtw_id;
        $logs["meeting_id"] = $zoom_meeting_id;
        $logs["name"] = $item->name;
        $logs["comment"] = "GENERATED BY SYSTEM";
        $logs["updated_by"] = "SYSTEM";
        $logs["user_email"] = $item->email;
        $logs["duration"] = $participant ? $participant["duration"] : 0;
        $logs["duration_in_minutes"] = $participant ? $participant["duration_in_minutes"] : 0;
        if ($participant) {
          $logs["duration_percentages"] = $participant["duration_percentages"] > 100 ? 100 : $participant["duration_percentages"];
        } else {
          $logs["duration_percentages"] = 0;
        }
        if (!$participant) $logs["presence"] = "NOT_ATTEND";
        else $logs["presence"] = $participant["duration_percentages"] >= 60 ? "ATTEND" : "NOT_ATTEND";

        return $logs;
      })->values()->toArray();
    // Log::info("[ZoomWebhook][meeting.ended] Student presence log payload has been created", ["data" => $presenceLog]);
    RabbitMq::send("onlineclass-attendance.created", json_encode([
      "version" => 1,
      "data" => $presenceLog
    ]));
  }
}
